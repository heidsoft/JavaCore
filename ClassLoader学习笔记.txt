ClassLoader学习笔记

   bootstrap classloader        （由JVM用C代码实现的加载器，加载jre/lib下的jar包）

        |

extension classloader        （sun.misc.Launcher$ExtClassLoader，系统属性java.ext.dirs指定，加载 jre/lib/ext目录下的jar包）

        |

system classloader           （sun.misc.Launcher$AppClassLoader，系统属性java.class.path指定，加载 项目 classes 目录、lib目录下的.jar包 ）

 

1. 加载.class时，使用委托机制，即加载.class时，如果有父类加载器，则先在父类加载器管理的目录下查找.class，如果没有，则从子加载器的目录中加载。

     用这种委托方式会比较安全，我们自己写一个java.lang.String，就不会被加载，因为它是被bootstrap加载器加载的。

2. 我们用tomcat的jsp页面做个测试：...



Tool.java(得到类加载器等信息,并输出到jsp页面)

import java.io.Writer;
import java.net.URL;
import java.net.URLClassLoader;

public class Tool
{
    public static final String nextLine = "<br>";
    public static final String prefix = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
    
    /**
     * 输出系统属性
     */
    public static void outputSysProp(Writer out)
    {
        try
        {
            out.write(nextLine);
            out.write(nextLine);
            out.write("<font color='red'>系统属性信息 start</font>" + nextLine);

            String extDir = System.getProperty("java.ext.dirs");
            String classPathDir = System.getProperty("java.class.path");
            
            out.write(prefix + "1>. java.ext.dirs : " + extDir + nextLine);
            out.write(prefix + "2>. java.class.path : " + classPathDir + nextLine);

            out.write("<font color='red'>系统属性信息 end</font>" + nextLine);
            out.flush();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    /**
     * 输出boot strap加载器信息
     */
    public static void outputBootStrap(Writer out)
    {
        try
        {
            out.write(nextLine);
            out.write(nextLine);
            
            out.write("<font color='red'>Boot Strap 加载器信息 start</font>" + nextLine);
            
            URL[] urls = sun.misc.Launcher.getBootstrapClassPath().getURLs();
            out.write(urlToString(urls));
            
            out.write("<font color='red'>Boot Strap 加载器信息 end</font>" + nextLine);
            
            out.flush();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
    
    /**
     * 输出loader的名称、加载的路径，即其父加载器的名称、加载路径
     * @param out        输出
     * @param loader    类加载器
     */
    public static void output(Writer out, ClassLoader loader)
    {
        try
        {
            if(loader == null || out == null)
            {
                return;
            }
            int count = 0;
            while(loader != null)
            {
                count++;
                out.write(count + ". 加载器名称 : " + loader.getClass().getName() + nextLine);
                if(loader instanceof URLClassLoader)
                {
                    URLClassLoader _loader = (URLClassLoader)loader;
                    URL[] urls = _loader.getURLs();
                    out.write(urlToString(urls));
                }
                loader = loader.getParent();
            }
            out.flush();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
    
    /**
     * 输出URL信息
     */
    public static String urlToString(URL[] urls)
    {
        if(urls == null || urls.length <= 0)
            return null;
        StringBuffer buf = new StringBuffer(200);
        for(int i = 0; i < urls.length; i++)
        {
            URL url = urls[i];
            buf.append(prefix).append((i + 1) + ">. 加载路径 : ").append(url.getPath()).append(nextLine);
        }
        return buf.toString();
    }
}

 

MyServlet.java(获取Servlet类加载器信息)

public class MyServlet extends HttpServlet
{
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        PrintWriter out = response.getWriter();
        out.print("<br><br>");
        out.print("<font color='red'>Servlet加载器信息 start</font><br>");
        
        Tool.output(out, getClass().getClassLoader());
        
        out.print("<font color='red'>Servlet加载器信息 end</font><br>");
    }

    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        doGet(request, response);
    }
}

 

index.jsp(获取jsp的类加载器,并将各信息显示到页面)

    <body>
        <%
            // 0. 输出系统属性
            Tool.outputSysProp(out);
            
            // 1. 输出 boot strap 加载器信息
            Tool.outputBootStrap(out);
            
            // 2. 输出 servlet 加载器信息
        %>
        <jsp:include page="/MyServlet" />
        <%
            
            // 3. 输出 jsp 加载器信息
            outputJSP(out);
        %>
        <%!
            /**
             * 输出jsp 加载器信息
             */
            private void outputJSP(Writer out)
            {
                try
                {
                    out.write("<br><br>");
                    out.write("<font color='red'>Jsp 加载器信息 start</font><br>");
                    Tool.output(out, getClass().getClassLoader());
                    out.write("<font color='red'>Jsp 加载器信息 end</font><br>");
                    out.flush();
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
            }
        %>
    </body>
